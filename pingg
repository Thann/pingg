#!/usr/bin/env node
'use strict';

// Ping graphing tool:
// pingg google.com yahoo.com

const net = require('net');
const TS = require('./ts').$ts;
const Config = require('bcfg');
const blessed = require('blessed');
const contrib = require('blessed-contrib');
const cp = require('child_process');
let netroute;
try {
	netroute = require('netroute');
} catch(e) {
	if (e.code !== 'MODULE_NOT_FOUND')
		console.error(e);
}

// Parse arguments
const config = new Config('pingg', {
	alias: {
		'Y': 'maxy',
		'y': 'miny',
		'm': 'max',
		'c': 'colors',
		'f': 'flood',
		'A': 'flood',
		't': 'trace',
		'p': 'prune',
		'g': 'gateway',
		'i': 'interval',
	},
});
config.inject({
	'prune': 1000,
	'colors': ['green', 'blue', 'red', 'white', 'yellow', 'magenta'],
});
config.load({ argv: true });

let gateway;
try {
	 gateway = netroute && netroute.getGateway();
} catch(e) {
	console.error(e);
}
if (!config.argv.length)
	config.argv = ['8.8.8.8', '1.1.1.1', gateway].filter(Boolean);
else if (config.bool('gateway') && gateway)
	config.argv.push(gateway);
if (config.get('trace')) {
	if (config.str('trace') !== 'true')
		config.argv = [config.get('trace')];
	config.argv = cp.execSync('traceroute '+ config.argv[0])
		.toString().split('\n').reduce((arr, s) => {
			const e = / \(([\w.]+)\) /.exec(s);
			if (e && e[1]) arr.push(e[1]);
			return arr;
		}, []);
}

const colors = config.array('colors');
const data = [];
let cIndex = 0;
const minY = config.float('miny') || 0;
const maxY = config.float('maxy') || null;

// Setup display
const screen = blessed.screen();
const line = contrib.line({
	xLabelPadding: 3,
	xPadding: 5,
	yLabelPadding: 1,
	yPadding: 1,
	showLegend: true,
	label: 'Network latency',
	minY: minY,
	maxY: maxY,
});
screen.append(line);
screen.on('resize', _ => line.emit('attach'));
// Keybinds to exit
screen.key(['escape', 'q', 'C-c'], _ => process.exit(0));
screen.key(['C-p'], prune);
screen.render();

// Ping each host and display results
for (const host of config.argv) {
	const hostData = {
		title: host,
		x:[],
		y:[],
		ts:[],
		pingIndex: 0,
		style: {
			line: colors[cIndex++ % colors.length],
		},
	};
	data.push(hostData);

	if ((host.match(/:/g) || []).length !== 1) { // ICMP
		const ping = cp.spawn('ping', [host].concat(
			config.get ('interval') && ['-i', config.get('interval')]  ||
			config.bool('flood') && ['-A'] || []));
		ping.stdout.on('data', function(d) {
			const latency = (/time=([\d\.]+) ms/g).exec(d.toString());
			if (latency) pushData(hostData, latency[1]);
		});
		ping.stdout.on('end', function() {
			hostData.title = '!! ' + host;
		});
		// Ctrl-z will stop without exiting
		screen.key(['C-z'], _ => ping.kill());
	} else { // TCP
		let skip, interval;
		const tcping = function() {
			if (skip) return;
			skip = true;
			const sock = new net.Socket();
			const start = process.hrtime();
			const [hostname, port] = host.split(':');
			sock.connect(port, hostname, () => {
				skip = false;
				sock.destroy();
				hostData.title = host;
				const end = process.hrtime(start);
				pushData(hostData, (end[0] * 1e9 + end[1]) / 1e6);
			});
			sock.on('error', (e) => {
				sock.destroy();
				clearTimeout(interval);
				hostData.title = '!! ' + host;
			});
			sock.setTimeout(config.get('interval', 1) * 1200, (e) => {
				skip = false;
				sock.destroy();
				hostData.title = '!! ' + host;
				pushData(hostData, config.get('interval', 1) * 1000);
			});
		};
		interval = setInterval(tcping, config.get('interval', 1) * 1000);
		// Ctrl-z will stop without exiting
		screen.key(['C-z'], _ => clearTimeout(interval));
		tcping();
	}
}

function pushData(hostData, frame) {
	const d = new Date();
	hostData.x.push(d.toLocaleTimeString());
	hostData.y.push(parseFloat(frame));
	hostData.ts.push(Math.floor(d / 1000)); // X but for the ts lib
	if (config.get('max')) {
		if (hostData.x.length >= config.int('max')) {
			hostData.x.splice(0, hostData.x.length - config.int('max'));
			hostData.y.splice(0, hostData.y.length - config.int('max'));
			hostData.ts.splice(0, hostData.ts.length - config.int('max'));
		}
	} else if (config.int('prune') && !(hostData.pingIndex++ % config.int('prune')))
		prune();
	line.setData(data);
	screen.render();
}

// Prune - Remove static from the data to make it smaller
function prune() {
	for (const hostData of data) {
		if (!hostData.ts.length) continue;
		const after = TS.numeric(
			hostData.ts.map((x, i) => {
				return [x, hostData.y[i]];
			})
		).simplify();
		if (after.data.length < hostData.x.length) {
			hostData.x = [];
			hostData.y = [];
			hostData.ts = [];
			for (const [ts ,v] of after.data) {
				hostData.y.push(v);
				hostData.ts.push(ts);
				hostData.x.push((new Date(ts * 1000)).toLocaleTimeString());
			}
		}
	}
};
